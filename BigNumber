import java.util.ArrayList;

public class BigNumber implements Comparable<BigNumber> {
	private ArrayList<Integer> myDigits = new ArrayList<Integer>();
	  private int myLength;
	  public BigNumber(String num)
	  {
	    myLength = num.length();
	    char[] digits = new char[myLength];
	    num.getChars(0, myLength, digits, 0);
	    int negative = 1;
	    boolean flag = false;
	    for (char c: digits)
	    {
	      if (c == '-')
	      {
	    	  if (flag == false)
	    	  {
		    	  negative = -1;
		    	  flag = true;
	    	  }
	      }
	      else
	      {
		      Integer i = Character.getNumericValue(c) * negative;
		      myDigits.add(i);
		      flag = true;
		      negative = 1;
	      }
	    }
	  }
	  public BigNumber(ArrayList<Integer> num)
	  {
	    myDigits = num;
	    myLength = num.size();
	  }
	  //Accessor Methods
	  public int getLength()
	  {
		myLength = myDigits.size();
	    return myLength;
	  }
	  public ArrayList<Integer> getDigits()
	  {
	    return myDigits;
	  }
	  public String toString()
	  {
	    String result = "";
	    for (Integer i : myDigits)
	    {
	      result += i;
	    }
	    return result;
	  }

	  //Algebraic Methods
	  public BigNumber add(BigNumber addend)
	  {
	    if (this.isNegative() && !addend.isNegative())
	      return addend.subtract(this.abs());
	    else if (addend.isNegative() && !this.isNegative())
	      return this.subtract(addend.abs());
	    else if (addend.isNegative() && this.isNegative())
	      return this.abs().add(addend.abs()).negative();
	    if (addend.getLength() > this.getLength())
	      return addend.add(this);
	    ArrayList<Integer> newDigits = new ArrayList<Integer>(this.getLength());
	    int shorth = addend.getLength();
	    int i, carry = 0;
	    boolean setCarry = false;
	    for (i = 1; i < shorth + 1; i++)
	    {
	      int set = this.getDigits().get(this.getLength() - i) + 
	                addend.getDigits().get(addend.getLength() - i);
	      int setAndCarry = set + carry;
	      if (setAndCarry >= 10)
	      {
	        setAndCarry %= 10;
	        setCarry = true;
	      }  
	      newDigits.add(0, setAndCarry);
	      carry = 0;
	      if (setCarry)
	        carry = 1;
	      setCarry = false;
	    }
	    while (i < this.getLength() + 1)
	    {
	    	if (this.getDigits().get(this.getLength() - i) + carry < 10)
	    	{
		    	newDigits.add(0,
		    			this.getDigits().get(this.getLength() - i) + carry);
		    	carry = 0;
	    	}
	    	else
	    	{
	    		newDigits.add(0,
		    			(this.getDigits().get(this.getLength() - i) + carry) % 10);
		    	carry = (this.getDigits().get(this.getLength() - i) + carry) / 10;
	    	}
	      i++;
	    }
	    if (carry != 0)
	    {
	      newDigits.add(0, carry);
	    }
	    return new BigNumber(newDigits);
	  }

	  public BigNumber multiply(BigNumber factor)
	  {
	    if (factor.getLength() > this.getLength())
	      return factor.multiply(this);
	    //alias solves aliasing problem with multiply
	      ArrayList<Integer> alias1 = new ArrayList<Integer>();
	      ArrayList<Integer> alias2 = new ArrayList<Integer>();
	      for (Integer i : this.getDigits()) 
	        alias1.add(i);
	      for (Integer i : factor.getDigits())
	        alias2.add(i);
	    BigNumber thisAlias = new BigNumber(alias1);
	      thisAlias = thisAlias.abs();
	    BigNumber factorAlias = new BigNumber(alias2);
	      factorAlias = factorAlias.abs();
	    ArrayList<Integer> newDigits = new ArrayList<Integer>(thisAlias.getLength());
	    BigNumber result = new BigNumber("0");
	    int i, j, k, carry = 0;
	    boolean setCarry = false;
	    for (i = 0; i < factorAlias.getLength(); i++)
	    {
	        newDigits.clear();
	        for (j = 1; j < thisAlias.getLength() + 1; j++)
	        {
	          int set = thisAlias.getDigits().get(thisAlias.getLength() - j) * 
	                  factorAlias.getDigits().get(factorAlias.getLength() - i - 1);
	          int setAndCarry = set + carry;
	          if (setAndCarry >= 10)
	          {
	            setAndCarry %= 10;
	            setCarry = true;
	          }
	          newDigits.add(0, setAndCarry);
	          if (setCarry)
	            carry = (set + carry) / 10;
	          else
	            carry = 0;
	          setCarry = false;
	        }
	        if (carry > 0)
	        {
	          newDigits.add(0, carry);
	          carry = 0;
	        }
	        for (k = 0; k < i; k++)
	          newDigits.add(0);
	      result = result.add(new BigNumber(newDigits));
	    }
	    if ((!(this.isNegative()) && !(factor.isNegative())) || ((this.isNegative()) && (factor.isNegative())))
	      return result;
	    else
	      return result.negative();
	  }

	  public BigNumber subtract(BigNumber subtrahend)
	  {
	    if (this.isNegative() && !subtrahend.isNegative())
	      return this.abs().add(subtrahend).negative();
	    else if (subtrahend.isNegative() && !this.isNegative())
	      return this.add(subtrahend.abs());
	    else if (subtrahend.isNegative() && this.isNegative())
	      return this.abs().subtract(subtrahend.abs()).negative();
	    if (this.compareTo(subtrahend) < 0)
	      return subtrahend.subtract(this).negative();
	    ArrayList<Integer> minuend = this.getDigits();
	    ArrayList<Integer> newDigits = new ArrayList<Integer>();
	    int i;
	    while (subtrahend.getLength() < minuend.size())
	    	subtrahend.getDigits().add(0, 0);
	    for (i = 1; i <= subtrahend.getLength(); i++)
	    {
	      if (minuend.get(minuend.size() - i) <  
	          subtrahend.getDigits().get(subtrahend.getLength() - i))
	      {
	        minuend.set(minuend.size() - i,
	          minuend.get(minuend.size() - i) + 10);
	        minuend.set(minuend.size() - i - 1,
	          minuend.get(minuend.size() - i - 1) - 1);
	      }
	    }
	    for (i = 1; i <= subtrahend.getLength(); i++)
	    {
	      newDigits.add(0, 
	        minuend.get(minuend.size() - i) - 
	        subtrahend.getDigits().get(subtrahend.getLength() - i));
	    }
	    while (i < this.getLength() + 1)
	    {
	      newDigits.add(0, minuend.get(minuend.size() - i));
	      i++;
	    }
	    BigNumber result = new BigNumber(newDigits);
	    return result.removeZeroes();
	  }
	  
	public BigNumber divide(BigNumber denominator)
	  {
		if (denominator.getLength() == 1)
		{
			if (denominator.asInt() == 0)
				return new BigNumber("0");
		}
	    //alias solves aliasing problem with divide fxn
	      ArrayList<Integer> alias = new ArrayList<Integer>();
	      for (Integer i : this.getDigits()) 
	        alias.add(i);
	    BigNumber numerator = new BigNumber(alias);
	    numerator = numerator.abs();
	    ArrayList<Integer> pows = new ArrayList<Integer>();
	    while (numerator.compareTo(denominator) > -1)
	    {
	    	ArrayList<Integer> alias2 = new ArrayList<Integer>();
		      for (Integer i : denominator.getDigits()) 
		        alias2.add(i);
		    BigNumber d = new BigNumber(alias2);
		    int x = 1;
		    while ((d.multiply(denominator)).compareTo(numerator) < 1)
		    {
		    	d = d.multiply(denominator);
		    	++x;
		    }
		    numerator = numerator.subtract(d);
		    pows.add(x);
	    }
	    BigNumber result = new BigNumber("0");
	    for (Integer x: pows)
	    {
	    	--x;
	    	result = result.add(denominator.exponent(new BigNumber(x.toString())));
	    }
	    if ((!(this.isNegative()) && !(denominator.isNegative())) || ((this.isNegative()) && (denominator.isNegative())))
		      return result;
		    else
		      return result.negative();
	  }
	
	public BigNumber exponent(BigNumber power)
	{
		//alias solves aliasing problem with fxn
		ArrayList<Integer> alias = new ArrayList<Integer>();
		ArrayList<Integer> alias2 = new ArrayList<Integer>();
	      for (Integer i : this.getDigits()) 
	        alias.add(i);
	      for (Integer j : power.getDigits())
	    	  alias2.add(j);
	    BigNumber result = new BigNumber(alias);
	    BigNumber aliasPower = new BigNumber(alias2);
		//for(int i = 0; i < (intPower - 1); i++)
	    while (aliasPower.compareTo(new BigNumber("1")) > 0 )
		{
			result = result.multiply(this);
			aliasPower = aliasPower.subtract(new BigNumber("1"));
		}
		return result;
	}
	
	public int asInt()
	{
		return Integer.parseInt(this.toString());
	}

	  public int compareTo(BigNumber b)
	  {
	    if ((!(this.isNegative()) && !(b.isNegative())) || ((this.isNegative()) && (b.isNegative())))
	    {
	      if (this.getLength() > b.getLength())
	        return 1;
	      else if (b.getLength() > this.getLength())
	        return -1;
	    } else {
	      if (this.isNegative())
	        return -1;
	      else if (b.isNegative())
	        return 1;
	    }
	    for (int i = 0; i < b.getLength(); i++)
	    {
	      if (this.getDigits().get(i) >
	          b.getDigits().get(i))
	          return 1;
	      else if (b.getDigits().get(i) >
	              this.getDigits().get(i))
	          return -1;
	    }
	    return 0;
	  }

	  public BigNumber abs()
	  {
	    if (this.isNegative())
	      return this.negative();
	    return this;
	  }

	  public BigNumber negative()
	  {
	    ArrayList<Integer> newDigits = this.getDigits();
	    newDigits.set(0, newDigits.get(0) * -1);
	    return new BigNumber(newDigits);
	  }

	  public boolean isNegative()
	  {
	    return (this.removeZeroes().getDigits().get(0) < 0);
	  }
	  
	  public BigNumber removeZeroes() {
		  ArrayList<Integer> newDigits = this.getDigits();
		  while ((newDigits.get(0) == 0) &&  (newDigits.size() != 1))
		    {
		      newDigits.remove(0);
		    }
		    return new BigNumber(newDigits);
	  }
	  
	  public void append(Integer i)
	  {
		  this.getDigits().add(i);
	  }
}
